#if 0
prog=${0%/*}/../build/${0##*/}.exe
base=${0%/*}/in/${0##*/}
set -ex
cc -x c $0 -o $prog || exit 1
case $1 in
    check)  bla() { diff -u $1 -; };;
    update) bla() { cat >$1; };;
    *) exec $prog "$@";;
esac

$prog $base/simple | bla $base/simple.tape
$prog $base/calls | bla $base/calls.tape
$prog $base/conds | bla $base/conds.tape
$prog $base/weird | bla $base/weird.tape

exit
#endif

#include "../cintre/parser.h"

// print {{{
void print_expr(FILE* strm, expression cref expr) {
    if (ATOM != expr->kind) fprintf(strm, "(");
    switch (expr->kind) {
    case ATOM: fprintf(strm, "%.*s", (unsigned)expr->info.atom.len, expr->info.atom.ptr); return;
    case BINOP_COMMA:      print_expr(strm, expr->info.binary.lhs); fprintf(strm, ", "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN:       print_expr(strm, expr->info.binary.lhs); fprintf(strm, " = "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_SUB:   print_expr(strm, expr->info.binary.lhs); fprintf(strm, "-= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_ADD:   print_expr(strm, expr->info.binary.lhs); fprintf(strm, "+= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_REM:   print_expr(strm, expr->info.binary.lhs); fprintf(strm, "%%= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_DIV:   print_expr(strm, expr->info.binary.lhs); fprintf(strm, "/= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_MUL:   print_expr(strm, expr->info.binary.lhs); fprintf(strm, "*= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_BOR:   print_expr(strm, expr->info.binary.lhs); fprintf(strm, "|= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_BXOR:  print_expr(strm, expr->info.binary.lhs); fprintf(strm, "^= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_BAND:  print_expr(strm, expr->info.binary.lhs); fprintf(strm, "&= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_BSHL:  print_expr(strm, expr->info.binary.lhs); fprintf(strm, "<<= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ASGN_BSHR:  print_expr(strm, expr->info.binary.lhs); fprintf(strm, ">>= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_TERNBRANCH: print_expr(strm, expr->info.binary.lhs); fprintf(strm, " : "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_TERNCOND:   print_expr(strm, expr->info.binary.lhs); fprintf(strm, " ? "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_LOR:        print_expr(strm, expr->info.binary.lhs); fprintf(strm, " || "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_LAND:       print_expr(strm, expr->info.binary.lhs); fprintf(strm, " && "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_BOR:        print_expr(strm, expr->info.binary.lhs); fprintf(strm, "|"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_BXOR:       print_expr(strm, expr->info.binary.lhs); fprintf(strm, "^"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_BAND:       print_expr(strm, expr->info.binary.lhs); fprintf(strm, "&"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_EQ:         print_expr(strm, expr->info.binary.lhs); fprintf(strm, " == "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_NE:         print_expr(strm, expr->info.binary.lhs); fprintf(strm, " != "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_LT:         print_expr(strm, expr->info.binary.lhs); fprintf(strm, " < "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_GT:         print_expr(strm, expr->info.binary.lhs); fprintf(strm, " > "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_LE:         print_expr(strm, expr->info.binary.lhs); fprintf(strm, " <= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_GE:         print_expr(strm, expr->info.binary.lhs); fprintf(strm, " >= "); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_BSHL:       print_expr(strm, expr->info.binary.lhs); fprintf(strm, "<<"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_BSHR:       print_expr(strm, expr->info.binary.lhs); fprintf(strm, ">>"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_SUB:        print_expr(strm, expr->info.binary.lhs); fprintf(strm, "-"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_ADD:        print_expr(strm, expr->info.binary.lhs); fprintf(strm, "+"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_REM:        print_expr(strm, expr->info.binary.lhs); fprintf(strm, "%%"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_DIV:        print_expr(strm, expr->info.binary.lhs); fprintf(strm, "/"); print_expr(strm, expr->info.binary.rhs); break;
    case BINOP_MUL:        print_expr(strm, expr->info.binary.lhs); fprintf(strm, "*"); print_expr(strm, expr->info.binary.rhs); break;
    case UNOP_ADDR:        fprintf(strm, "&"); print_expr(strm, expr->info.unary.opr); break;
    case UNOP_DEREF:       fprintf(strm, "*"); print_expr(strm, expr->info.unary.opr); break;
    case UNOP_BNOT:        fprintf(strm, "~"); print_expr(strm, expr->info.unary.opr); break;
    case UNOP_LNOT:        fprintf(strm, "!"); print_expr(strm, expr->info.unary.opr); break;
    case UNOP_MINUS:       fprintf(strm, "-"); print_expr(strm, expr->info.unary.opr); break;
    case UNOP_PLUS:        fprintf(strm, "+"); print_expr(strm, expr->info.unary.opr); break;
    case UNOP_PRE_DEC:     fprintf(strm, "--"); print_expr(strm, expr->info.unary.opr); break;
    case UNOP_PRE_INC:     fprintf(strm, "++"); print_expr(strm, expr->info.unary.opr); break;
    case BINOP_SUBSCR:     print_expr(strm, expr->info.subscr.base); fprintf(strm, " [] "); print_expr(strm, expr->info.subscr.off); break;
    case BINOP_CALL:       print_expr(strm, expr->info.call.base); fprintf(strm, " () "); if (expr->info.call.args) print_expr(strm, expr->info.call.args); else fprintf(strm, "()"); break;
    case UNOP_PMEMBER:     print_expr(strm, expr->info.member.base); fprintf(strm, "->%.*s", bufmt((*expr->info.member.name))); break;
    case UNOP_MEMBER:      print_expr(strm, expr->info.member.base); fprintf(strm, ".%.*s", bufmt((*expr->info.member.name))); break;
    case UNOP_POST_DEC:    print_expr(strm, expr->info.unary.opr); fprintf(strm, "--"); break;
    case UNOP_POST_INC:    print_expr(strm, expr->info.unary.opr); fprintf(strm, "++"); break;
    }
    fprintf(strm, ")");
}
// }}}

void show(void ref _, expression ref expr, bufsl ref tok) {
    (void)_;
    print_expr(stdout, expr);
    printf(" -- tok: %.*s\n", (unsigned)tok->len, tok->ptr);
}

int main(int argc, char** argv) {
    if (1 == argc) return puts("Usage: <prog> <filename>");

    lex_state ls = {0};
    lini(&ls, argv[1]);

    bufsl tok = lext(&ls);
    parse_expr_state ps = {.ls= &ls, .on= show};
    while (tok.len) if ((tok = parse_expression(&ps, tok)).len)
        switch (*tok.ptr) {
        case ';':
            tok = lext(&ls);
            continue;

        default:
            exitf("other: %.*s", (unsigned)tok.len, tok.ptr);
        }

    ldel(&ls);
}
